$date
  Thu May 10 11:54:31 2018
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 8 ! charinput[7:0] $end
$var reg 1 " iscorrect $end
$var integer 32 # address $end
$scope module u1 $end
$var reg 8 $ charinput[7:0] $end
$var integer 32 % address $end
$var reg 1 & iscorrect $end
$var reg 8 ' auxdata[7:0] $end
$scope module ur1 $end
$var integer 32 ( address $end
$var reg 8 ) data[7:0] $end
$upscope $end
$scope module uc1 $end
$var reg 8 * charinputa[7:0] $end
$var reg 8 + charinputb[7:0] $end
$var reg 1 , bitoutput $end
$var reg 1 - a1 $end
$var reg 1 . a2 $end
$var reg 1 / a3 $end
$var reg 1 0 a4 $end
$var reg 1 1 a5 $end
$var reg 1 2 a6 $end
$var reg 1 3 a7 $end
$var reg 1 4 a8 $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b00000000 !
0"
b0 #
b00000000 $
b0 %
0&
b01100001 '
b0 (
b01100001 )
b00000000 *
b01100001 +
0,
0-
1.
1/
10
11
02
03
14
#1000000
b00001000 !
b00001000 $
b00001000 *
00
#2000000
b00000000 !
b00000000 $
b00000000 *
10
#3000000
b01100001 !
1"
b01100001 $
1&
b01100001 *
1,
1-
12
13
#5000000
0"
b1 #
b1 %
0&
b01100010 '
b1 (
b01100010 )
b01100010 +
0,
0-
0.
#6000000
b01100010 !
1"
b01100010 $
1&
b01100010 *
1,
1-
1.
#7000000
b00010001 !
0"
b10100 #
b00010001 $
b10100 %
0&
b01110101 '
b10100 (
b01110101 )
b00010001 *
b01110101 +
0,
1-
1.
0/
11
02
03
